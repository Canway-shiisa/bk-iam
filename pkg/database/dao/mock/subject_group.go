// Code generated by MockGen. DO NOT EDIT.
// Source: subject_group.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectGroupManager is a mock of SubjectGroupManager interface.
type MockSubjectGroupManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectGroupManagerMockRecorder
}

// MockSubjectGroupManagerMockRecorder is the mock recorder for MockSubjectGroupManager.
type MockSubjectGroupManagerMockRecorder struct {
	mock *MockSubjectGroupManager
}

// NewMockSubjectGroupManager creates a new mock instance.
func NewMockSubjectGroupManager(ctrl *gomock.Controller) *MockSubjectGroupManager {
	mock := &MockSubjectGroupManager{ctrl: ctrl}
	mock.recorder = &MockSubjectGroupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectGroupManager) EXPECT() *MockSubjectGroupManagerMockRecorder {
	return m.recorder
}

// BulkCreateWithTx mocks base method.
func (m *MockSubjectGroupManager) BulkCreateWithTx(tx *sqlx.Tx, relations []dao.SubjectRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateWithTx", tx, relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreateWithTx indicates an expected call of BulkCreateWithTx.
func (mr *MockSubjectGroupManagerMockRecorder) BulkCreateWithTx(tx, relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateWithTx", reflect.TypeOf((*MockSubjectGroupManager)(nil).BulkCreateWithTx), tx, relations)
}

// BulkDeleteByGroupPKs mocks base method.
func (m *MockSubjectGroupManager) BulkDeleteByGroupPKs(tx *sqlx.Tx, groupPKs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByGroupPKs", tx, groupPKs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteByGroupPKs indicates an expected call of BulkDeleteByGroupPKs.
func (mr *MockSubjectGroupManagerMockRecorder) BulkDeleteByGroupPKs(tx, groupPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByGroupPKs", reflect.TypeOf((*MockSubjectGroupManager)(nil).BulkDeleteByGroupPKs), tx, groupPKs)
}

// BulkDeleteByMembersWithTx mocks base method.
func (m *MockSubjectGroupManager) BulkDeleteByMembersWithTx(tx *sqlx.Tx, parentPK int64, subjectPKs []int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByMembersWithTx", tx, parentPK, subjectPKs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDeleteByMembersWithTx indicates an expected call of BulkDeleteByMembersWithTx.
func (mr *MockSubjectGroupManagerMockRecorder) BulkDeleteByMembersWithTx(tx, parentPK, subjectPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByMembersWithTx", reflect.TypeOf((*MockSubjectGroupManager)(nil).BulkDeleteByMembersWithTx), tx, parentPK, subjectPKs)
}

// BulkDeleteBySubjectPKs mocks base method.
func (m *MockSubjectGroupManager) BulkDeleteBySubjectPKs(tx *sqlx.Tx, subjectPKs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteBySubjectPKs", tx, subjectPKs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteBySubjectPKs indicates an expected call of BulkDeleteBySubjectPKs.
func (mr *MockSubjectGroupManagerMockRecorder) BulkDeleteBySubjectPKs(tx, subjectPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteBySubjectPKs", reflect.TypeOf((*MockSubjectGroupManager)(nil).BulkDeleteBySubjectPKs), tx, subjectPKs)
}

// GetMemberCount mocks base method.
func (m *MockSubjectGroupManager) GetMemberCount(parentPK int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberCount", parentPK)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberCount indicates an expected call of GetMemberCount.
func (mr *MockSubjectGroupManagerMockRecorder) GetMemberCount(parentPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberCount", reflect.TypeOf((*MockSubjectGroupManager)(nil).GetMemberCount), parentPK)
}

// GetMemberCountBeforeExpiredAt mocks base method.
func (m *MockSubjectGroupManager) GetMemberCountBeforeExpiredAt(parentPK, expiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberCountBeforeExpiredAt", parentPK, expiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberCountBeforeExpiredAt indicates an expected call of GetMemberCountBeforeExpiredAt.
func (mr *MockSubjectGroupManagerMockRecorder) GetMemberCountBeforeExpiredAt(parentPK, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberCountBeforeExpiredAt", reflect.TypeOf((*MockSubjectGroupManager)(nil).GetMemberCountBeforeExpiredAt), parentPK, expiredAt)
}

// ListGroupPKsHasMemberBeforeExpiredAt mocks base method.
func (m *MockSubjectGroupManager) ListGroupPKsHasMemberBeforeExpiredAt(groupPKs []int64, expiredAt int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupPKsHasMemberBeforeExpiredAt", groupPKs, expiredAt)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupPKsHasMemberBeforeExpiredAt indicates an expected call of ListGroupPKsHasMemberBeforeExpiredAt.
func (mr *MockSubjectGroupManagerMockRecorder) ListGroupPKsHasMemberBeforeExpiredAt(groupPKs, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupPKsHasMemberBeforeExpiredAt", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListGroupPKsHasMemberBeforeExpiredAt), groupPKs, expiredAt)
}

// ListMember mocks base method.
func (m *MockSubjectGroupManager) ListMember(parentPK int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMember", parentPK)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMember indicates an expected call of ListMember.
func (mr *MockSubjectGroupManagerMockRecorder) ListMember(parentPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMember", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListMember), parentPK)
}

// ListPagingMember mocks base method.
func (m *MockSubjectGroupManager) ListPagingMember(parentPK, limit, offset int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingMember", parentPK, limit, offset)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingMember indicates an expected call of ListPagingMember.
func (mr *MockSubjectGroupManagerMockRecorder) ListPagingMember(parentPK, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingMember", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListPagingMember), parentPK, limit, offset)
}

// ListPagingMemberBeforeExpiredAt mocks base method.
func (m *MockSubjectGroupManager) ListPagingMemberBeforeExpiredAt(parentPK, expiredAt, limit, offset int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingMemberBeforeExpiredAt", parentPK, expiredAt, limit, offset)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingMemberBeforeExpiredAt indicates an expected call of ListPagingMemberBeforeExpiredAt.
func (mr *MockSubjectGroupManagerMockRecorder) ListPagingMemberBeforeExpiredAt(parentPK, expiredAt, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingMemberBeforeExpiredAt", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListPagingMemberBeforeExpiredAt), parentPK, expiredAt, limit, offset)
}

// ListRelation mocks base method.
func (m *MockSubjectGroupManager) ListRelation(subjectPK int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelation", subjectPK)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelation indicates an expected call of ListRelation.
func (mr *MockSubjectGroupManagerMockRecorder) ListRelation(subjectPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelation", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListRelation), subjectPK)
}

// ListRelationBeforeExpiredAt mocks base method.
func (m *MockSubjectGroupManager) ListRelationBeforeExpiredAt(subjectPK, expiredAt int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationBeforeExpiredAt", subjectPK, expiredAt)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationBeforeExpiredAt indicates an expected call of ListRelationBeforeExpiredAt.
func (mr *MockSubjectGroupManagerMockRecorder) ListRelationBeforeExpiredAt(subjectPK, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationBeforeExpiredAt", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListRelationBeforeExpiredAt), subjectPK, expiredAt)
}

// ListSubjectPKsExistGroupPKsAfterExpiredAt mocks base method.
func (m *MockSubjectGroupManager) ListSubjectPKsExistGroupPKsAfterExpiredAt(subjectPKs, groupPKs []int64, expiredAt int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjectPKsExistGroupPKsAfterExpiredAt", subjectPKs, groupPKs, expiredAt)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjectPKsExistGroupPKsAfterExpiredAt indicates an expected call of ListSubjectPKsExistGroupPKsAfterExpiredAt.
func (mr *MockSubjectGroupManagerMockRecorder) ListSubjectPKsExistGroupPKsAfterExpiredAt(subjectPKs, groupPKs, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectPKsExistGroupPKsAfterExpiredAt", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListSubjectPKsExistGroupPKsAfterExpiredAt), subjectPKs, groupPKs, expiredAt)
}

// ListThinRelationAfterExpiredAtBySubjectPKs mocks base method.
func (m *MockSubjectGroupManager) ListThinRelationAfterExpiredAtBySubjectPKs(subjectPKs []int64, expiredAt int64) ([]dao.ThinSubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThinRelationAfterExpiredAtBySubjectPKs", subjectPKs, expiredAt)
	ret0, _ := ret[0].([]dao.ThinSubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThinRelationAfterExpiredAtBySubjectPKs indicates an expected call of ListThinRelationAfterExpiredAtBySubjectPKs.
func (mr *MockSubjectGroupManagerMockRecorder) ListThinRelationAfterExpiredAtBySubjectPKs(subjectPKs, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThinRelationAfterExpiredAtBySubjectPKs", reflect.TypeOf((*MockSubjectGroupManager)(nil).ListThinRelationAfterExpiredAtBySubjectPKs), subjectPKs, expiredAt)
}

// UpdateExpiredAtWithTx mocks base method.
func (m *MockSubjectGroupManager) UpdateExpiredAtWithTx(tx *sqlx.Tx, relations []dao.SubjectRelationPKPolicyExpiredAt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpiredAtWithTx", tx, relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpiredAtWithTx indicates an expected call of UpdateExpiredAtWithTx.
func (mr *MockSubjectGroupManagerMockRecorder) UpdateExpiredAtWithTx(tx, relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpiredAtWithTx", reflect.TypeOf((*MockSubjectGroupManager)(nil).UpdateExpiredAtWithTx), tx, relations)
}
